openapi: 3.0.3
info:
  title: Sliceopolis - Pizza management system
  description: |-
    This is a pizza management system Server based on the OpenAPI 3.0 specification.  

    You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://sliceopolis.onrender.com/
  - url: http://localhost:9999

tags:
  - name: Auth
    description: APIs for authentication
  - name: User
    description: APIs for user related operations
  - name: Product
    description: APIs for product related operations
  - name: Order
    description: APIs for order related operations
  - name: Voucher
    description: APIs for voucher related operations
  - name: Report
    description: APIs for report related operations

paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: Logs user into the system
      operationId: loginUser
      requestBody:
        description: |-
          Logs user into the system
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'

        required: true
      responses:
        '200':
          description: Login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfullyAuthenticated'

        '400':
          description: Bad request
        '404':
          description: User not found
        '401':
          description: Wrong password
        '500':
          description: Internal server error
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  description: Full name
                  example: John Doe
                phoneNumber:
                  type: string
                  description: Phone number
                  example: 0333675297
                password:
                  type: string
                  description: Password
                  example: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successfully
                  code:
                    type: integer
                    example: 200
                  metadata:
                    type: object
                    properties:
                      token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
                      role:
                        type: string
                        example: USER

        '400':
          description: Bad request
        '409':
          description: User already exists
        '500':
          description: Internal server error

  /users/me:
    get:
      tags:
        - User
      summary: Get user info [USER]
      description: Get user profile
      operationId: getMe
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
    put:
      tags:
        - User
      summary: Update user
      description: Update user profile
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                  description: User full name
                  example: John Doe
                phoneNumber:
                  type: string
                  description: User phone number
                  example: 0333675297
                address:
                  type: string
                  description: User address
                  example: Ha Noi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
        '400':
          description: Bad request
        '500':
          description: Internal server error
  /users/order-histories:
    get:
      tags:
        - User
      summary: Get user order history [USER]
      description: Get user order history
      operationId: getOrderHistory
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '404':
          description: User not found
        '500':
          description: Internal server error
  /users/:
    get:
      tags:
        - User
      summary: Get all user  [ADMIN, STAFF]
      description: Get all user
      operationId: getAllUser
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'

  /products/{id}:
    get:
      summary: Get information about a specific pizza
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: ID of the pizza to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailProduct'
        '404':
          description: Product not found
        '500':
          description: Internal server error
        '400':
          description: Bad request
    delete:
      summary: Delete a product   [ADMIN]
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: ID of the product to delete
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
        '404':
          description: Product not found
        '500':
          description: Internal server error
        '400':
          description: Bad request
  /products/:
    get:
      summary: Get information about all product
      tags:
        - Product
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'
        '404':
          description: Product not found
        '500':
          description: Internal server error
        '400':
          description: Bad request
    post:
      summary: Create a new product   [ADMIN]
      tags:
        - Product
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                  format: binary
                sizes:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    properties:
                      size:
                        type: string
                        enum: [SMALL, MEDIUM, LARGE]
                      price:
                        type: number
                      status:
                        type: string
                        enum: [SOLDOUT, STOCKING]
                      sold:
                        type: number
                  example:
                    [
                      { 'size': 'SMALL', 'price': 10.99 },
                      { 'size': 'MEDIUM', 'price': 13.99 },
                      { 'size': 'LARGE', 'price': 15.99 },
                    ]
                category:
                  type: string
                  enum: [PIZZA, DRINK, OTHERS]
                description:
                  type: string
      responses:
        '201':
          description: Product created successfully
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Insufficient permissions
        '400':
          description: Bad request - Invalid input data

  /orders/:
    post:
      summary: Create order
      security:
        - bearerAuth: []
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      id_item:
                        type: string
                        example: 65659632a10a5357d12cadbd
                      size:
                        type: string
                        enum: [SMALL, MEDIUM, LARGE]
                      quantity:
                        type: number
                        example: 1

                payment:
                  type: object
                  properties:
                    method:
                      type: string
                      enum: [CASH, MOMO, VNPAY]
                phoneNumber:
                  type: string
                  example: 0123456789
                voucher_code:
                  type: string
                  example: CODE
                address:
                  type: string
                  example: 123, ABC Street, XYZ City
      responses:
        '201':
          description: Order created successfully
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Insufficient permissions
        '400':
          description: Bad request - Invalid input data
    get:
      summary: Get order  [ADMIN, STAFF]
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /orders/{id}:
    get:
      summary: Get order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Insufficient permissions
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error
  /orders/{id}/update-status-delivery:
    patch:
      summary: Update status order  [ADMIN or STAFF who deliver order]
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Insufficient permissions
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error
  /orders/{id}/add-shipper:
    patch:
      summary: Add shipper to order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: ID of the order to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id_staff:
                  type: string
                  example: 655191198a6abb26daddcf32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /vouchers/:
    get:
      summary: Get voucher  [ADMIN, STAFF]
      security:
        - bearerAuth: []
      tags:
        - Voucher
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  code:
                    type: integer
                    example: 200
                  metadata:
                    type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/Voucher'
                      total:
                        type: integer
                        example: 10
    post:
      summary: Create voucher
      tags:
        - Voucher
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Voucher'
      responses:
        '201':
          description: Voucher created successfully
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Insufficient permissions
        '400':
          description: Bad request - Invalid input data
        '500':
          description: Internal server error
  /vouchers/{id}:
    get:
      summary: Get details of a voucher by ID
      tags:
        - Voucher
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the voucher to retrieve details
      responses:
        '200':
          description: Details of a voucher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoucherDetail'

  /reports/revenue:
    get:
      summary: Get revenue report following the year
      tags:
        - Report
      security:
        - bearerAuth: []
      parameters:
        - name: year
          in: query
          description: Year of the report
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  code:
                    type: integer
                    example: 200
                  metadata:
                    $ref: '#/components/schemas/Revenue'
  /reports/product:
    get:
      summary: Get product report
      tags:
        - Report
      security:
        - bearerAuth: []
      parameters:
        - name: category
          in: query
          description: Category of the product
          schema:
            type: string
            enum: [PIZZA, DRINK, OTHERS]
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  code:
                    type: integer
                    example: 200

components:
  schemas:
    LoginBody:
      type: object
      properties:
        phoneNumber:
          type: string
          example: 0333675297
        password:
          type: string
          example: password
    SuccessfunllyAuthenticated:
      type: object
      properties:
        message:
          type: string
          example: Login successfully
        code:
          type: integer
          example: 200
        metadata:
          type: object
          properties:
            token:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
    UserInfoResponse:
      type: object
      properties:
        message:
          type: string
          description: Response message
          example: OK
        code:
          type: integer
          format: int32
          description: Response code
          example: 200
        metadata:
          type: object
          properties:
            id:
              type: string
              format: MongoId
              example: 655191198a6abb26daddcf32
            fullname:
              type: string
              description: User full name
              example: John Doe
            phoneNumber:
              type: string
              description: User phone number
            address:
              type: string
              description: User address
            role:
              type: string
              description: User role
              example: USER
              enum:
                - ADMIN
                - USER
                - STAFF
    DetailProduct:
      type: object
      properties:
        message:
          type: string
          description: Response message
        code:
          type: integer
          description: Response code
        metadata:
          type: object
          properties:
            _id:
              type: string
              description: Unique ID of the pizza
              example: 655191198a6abb26daddcf32
            name:
              type: string
              description: Name of the pizza
              example: Margherita
            image:
              type: string
              description: Image URL of the pizza
              example: https://example.com/margherita.jpg
            sizes:
              type: array
              items:
                type: object
                properties:
                  _id:
                    type: string
                    description: Unique ID of the size
                    example: 655191198a6abb26daddcf32
                  size:
                    type: string
                    description: Size of the pizza (e.g., SMALL, MEDIUM, LARGE)
                    enum: ['SMALL', 'MEDIUM', 'LARGE']
                    example: SMALL
                  price:
                    type: number
                    format: float
                    description: Price of the pizza size
                    example: 10.99
                  sold:
                    type: integer
                    description: Number of pizzas sold in this size
                    example: 0
                  status:
                    type: string
                    description: Status of the size (e.g., STOCKING)
                    enum: ['STOCKING', 'SOLDOUT']
                    example: STOCKING
            category:
              type: string
              description: Category of the pizza (e.g., PIZZA)
              enum:
                - PIZZA
                - DRINK
                - OTHER
              example: PIZZA
            description:
              type: string
              description: Description of the pizza
              example: Classic Margherita pizza
            createAt:
              type: string
              format: date-time
              description: Date and time of creation
              example: 2022-01-01T00:00:00.000Z
            updateAt:
              type: string
              format: date-time
              description: Date and time of last update
              example: 2022-01-01T00:00:00.000Z
    ProductList:
      type: object
      properties:
        message:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        metadata:
          type: object
          properties:
            results:
              type: array
              items:
                $ref: '#/components/schemas/DetailProduct'
            total:
              type: integer
              example: 10
    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: MongoId
          example: 655191198a6abb26daddcf32
        fullname:
          type: string
          description: User full name
          example: John Doe
        phoneNumber:
          type: string
          description: User phone number
        address:
          type: string
          description: User address
        role:
          type: string
          description: User role
          example: USER
          enum:
            - ADMIN
            - USER
            - STAFF
        createAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
        updateAt:
          type: string
          format: date-time
          example: 2022-01-01T00:00:00.000Z
    UserList:
      type: object
      properties:
        message:
          type: string
          example: OK
        code:
          type: integer
          example: 200
        metadata:
          type: object
          properties:
            metadata:
              type: array
              items:
                $ref: '#/components/schemas/UserInfo'
            total:
              type: integer
              example: 10
    Order:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              id_item:
                type: string
              size:
                type: string
              quantity:
                type: number
        total:
          type: number
        created_at:
          type: string
          format: date-time
        close_at:
          type: string
          format: date-time
        payment:
          type: object
          properties:
            method:
              type: string
            status:
              type: string
            paid_at:
              type: string
              format: date-time
        delivery:
          type: object
          properties:
            id_staff:
              type: string
            status:
              type: string
            shipped_at:
              type: string
              format: date-time
        id_user:
          type: string
        phoneNumber:
          type: string
        id_voucher:
          type: string
        address:
          type: string
    Voucher:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        value:
          type: number
        start_at:
          type: string
          format: date-time
        close_at:
          type: string
          format: date-time
        used:
          type: number
        __v:
          type: number
        Type:
          type: string
        code:
          type: string
        maximumDiscount:
          type: number
        minimumOrder:
          type: number
        user_list:
          type: array
          items:
            type: string
    VoucherDetail:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        value:
          type: number
        start_at:
          type: string
          format: date-time
        close_at:
          type: string
          format: date-time
        used:
          type: number
        __v:
          type: number
        Type:
          type: string
        code:
          type: string
        maximumDiscount:
          type: number
        minimumOrder:
          type: number
        quantity:
          type: number
        user_list:
          type: array
          items:
            type: string
    Revenue:
      type: object
      properties:
        year:
          type: number
          example: 2023
        monthlyReport:
          type: object
          properties:
            month:
              type: number
              example: 1
            totalOrders:
              type: number
              example: 10
            revenue:
              type: number
              example: 100
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
